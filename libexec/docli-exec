#!/usr/bin/env bash
#
# Summary: Executes a CLI command
#
# Usage: docli exec <cli-name> [CLI_ARGS]
#
# Executes a registered CLI command using its Docker image and
# entrypoint.
#
# This commands mounts your $HOME into Docker's container home
# and make you current dir as PWD inside the container. This
# simulates the CLI execution inside the container.

set -e

function pwdhome {
  echo ${PWD/$HOME\//}
}

service="$1"

if [ "$(python ${DOCLI_ROOT}/src/docli_config.py exists $service)" != "1" ]; then
  echo "CLI '$service' not registered"
  exit 1
fi

image=$(python ${DOCLI_ROOT}/src/docli_config.py get_service_image $service)
entrypoint=$(python ${DOCLI_ROOT}/src/docli_config.py get_service_entrypoint $service)
volumes=$(python ${DOCLI_ROOT}/src/docli_config.py get_service_volumes $service)
ports=$(python ${DOCLI_ROOT}/src/docli_config.py get_service_ports $service)
network=$(python ${DOCLI_ROOT}/src/docli_config.py get_service_network $service)
links=$(python ${DOCLI_ROOT}/src/docli_config.py get_service_links $service)
use_host_user=$(python ${DOCLI_ROOT}/src/docli_config.py get_service_use_host_user $service)

cli_args_arr=($@)
cli_args="${cli_args_arr[@]:1}"

cmd="docker run -ti --rm -e HOME=/root -v $HOME:/root -w /root/$(pwdhome)"
[ -n "$entrypoint" ] && cmd="$cmd --entrypoint $entrypoint"
[ -n "$network" ] && cmd="$cmd --network $network"
[ "$use_host_user" == "1" ] && cmd="$cmd --user $UID"
for volume in $volumes; do
  cmd="$cmd -v=$volume"
done
for port in $ports; do
  cmd="$cmd -p=$port"
done
for link in $links; do
  cmd="$cmd --link=$link"
done
cmd="$cmd $image $cli_args"

$cmd
