#!/usr/bin/env python

import argparse
import sys
import os
import json
import re


class DocliConfig:
    def __init__(self):
        self.config = self.__load_config()

    def services(self):
        return self.config.get('services', {})

    def __load_config(self):
        config = {}

        for path in self.__config_paths():
            try:
                config_path = os.path.realpath(path + '/.doclirc')
                config.update(
                    json.load(open(config_path))
                )
            except (IOError, ValueError):
                pass

        return config

    def __config_paths(self):
        paths = [os.getcwd()] + self.__parent_directories(os.getcwd())
        paths.reverse()
        return paths

    def __parent_directories(self, path):
        if (os.environ['HOME'] == path): return []
        parent = os.path.dirname(path)
        return [parent] + self.__parent_directories(parent)


class DocliServiceManager:
    def __init__(self):
        self.config = DocliConfig()

    def exists(self, service):
        return service in self.services().keys()

    def services(self):
        return self.config.services()

    def execute_command(self, service, command):
        home = os.environ['HOME']
        service_image = self.services()[service]['image']
        cmd = 'docker run -ti --rm -v {}:/root -w /root/{} {} {}'.format(home, self.__pwdhome(), service_image, ' '.join(command))
        os.system(cmd)

    def __pwdhome(self):
        dir = os.getcwd().replace(os.environ['HOME'], '')
        return re.sub(r"^\/", '', dir)


class Docli(object):
    def __init__(self):
        self.service_manager = DocliServiceManager()

        parser = argparse.ArgumentParser(
            description='All in one CLi using Docker',
            usage='''docli <COMMAND> [<ARGS>]

Commands:
   exec       Execute a CLI command
''')
        parser.add_argument('command', help='Subcommand to run')
        # parse_args defaults to [1:] for args, but you need to
        # exclude the rest of the args too, or validation will fail
        args = parser.parse_args(sys.argv[1:2])
        if args.command != 'exec' and not hasattr(self, args.command):
            print 'Unrecognized command\n'
            parser.print_help()
            exit(1)
        # use dispatch pattern to invoke method with same name
        if (args.command == 'exec'):
            self.exec_cmd()
        else:
            getattr(self, args.command)()

    def exec_cmd(self):
        parser = argparse.ArgumentParser(
            description='Execute a CLI command',
            usage='docli exec <SERVICE_NAME> [<SERVICE_ARGS>]')
        parser.add_argument('service_name')
        args = parser.parse_args(sys.argv[2:3])

        if not self.service_manager.exists(args.service_name):
            print "CLI '{}' not registered\n".format(args.service_name)
            self.list()
            exit(1)

        self.service_manager.execute_command(args.service_name, sys.argv[3:])

    def list(self):
        services = self.service_manager.services().keys()

        if services:
            print("Registered CLIs:\n    {}".format('\n    '.join(services)))
        else:
            print("There are no CLI registered. To register a CLI use 'docli add'.")


if __name__ == '__main__':
    Docli()
